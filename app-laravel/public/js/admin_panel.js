document.addEventListener('DOMContentLoaded', function() {
    const searchInput = document.getElementById('user-search');
    const userTable = document.getElementById('user-list');
    const importStatus = document.getElementById('import-status');
    const sqlImportForm = document.getElementById("sql-import-form");
    const sqlFileInput = document.getElementById("sql-file");
    const addUserForm = document.getElementById("add-user-form");
    const usernameInput = document.getElementById("username");
    const emailInput = document.getElementById("email");
    const passwordInput = document.getElementById("password");
    const roleSelect = document.getElementById("role");
    const runTestsButton = document.getElementById('run-tests-button');
    const testResults = document.getElementById('test-results');
    const modal = document.getElementById('adminPasswordResetModal');
    const closeModal = document.querySelector('.close');
    const modalUsername = document.getElementById('modal-username');
    const userIdInput = document.getElementById('user-id');
    const newPasswordInput = document.getElementById('new-password'); 
    const resetPasswordForm = document.getElementById("reset-password-form"); 

    // Dodaj animacjƒô ≈Çadowania
    const loader = document.createElement('div');
    loader.classList.add('loader');
    testResults.before(loader); // Dodaj loader przed wynikami test√≥w

    // Funkcja logujƒÖca dane do konsoli z oznaczeniem pliku
    function logToConsole(label, data) {
        console.log(`[admin_panel.js] ${label}:`, data);
    }


    // Funkcja do przewijania strony do okre≈õlonego elementu
    function scrollToElement(element) {
        element.scrollIntoView({ behavior: 'smooth' });
    }

    // Funkcja do wy≈õwietlania statusu importu
    function showImportStatus(message, isSuccess) {
        logToConsole('Wywo≈Çano showImportStatus', message);
        importStatus.style.display = 'block';
        importStatus.textContent = message;
        importStatus.style.backgroundColor = isSuccess ? '#4CAF50' : '#ff4d4d';
    }

    // Funkcja do ukrywania statusu
    function hideImportStatus() {
        logToConsole('Ukrywanie statusu importu', null);
        importStatus.style.display = 'none';
    }



/////////////////////////// ^^^^ TO ZOSTALO STOCKOWE ^^^^ ///////////////////








    
    // Funkcja do pobierania listy u≈ºytkownik√≥w i od≈õwie≈ºania tabeli
    window.fetchAndUpdateUserList = function () {
        AdminAPI.getUsers().then(data => {
            if (!data || !data.data) {
                console.error('[admin_panel.js] B≈ÇƒÖd: Brak danych u≈ºytkownik√≥w');
                return;
            }
    
            console.log('[admin_panel.js] Pobrano listƒô u≈ºytkownik√≥w:', data);
            const userTableBody = document.getElementById('user-list');
    
            if (!userTableBody) {
                console.error("[admin_panel.js] B≈ÇƒÖd: Nie znaleziono elementu #user-list.");
                return;
            }
    
            userTableBody.innerHTML = ''; // Wyczy≈õƒá obecnƒÖ tabelƒô
    
            data.data.forEach(user => {
                const createdAt = user.created_at ? user.created_at.split('.')[0] : 'Brak danych';
                const roleName = user.role?.name || "Brak roli"; // Pobranie nazwy roli, je≈õli istnieje
    
                const row = document.createElement('tr');
                row.innerHTML = `
                    <td>${user.id}</td>
                    <td>${roleName}</td> <!-- Upewniamy siƒô, ≈ºe pobieramy nazwƒô roli -->
                    <td>${user.login}</td>
                    <td>${user.email}</td>
                    <td>${createdAt}</td>
                    <td>
                        <button type="button" class="reset-password-button button" data-user-id="${user.id}" data-login="${user.login}">Has≈Ço</button>
                        <button type="button" class="delete-button button" data-user-id="${user.id}">Usu≈Ñ</button>
                    </td>
                `;
                userTableBody.appendChild(row);
            });
    
            // Je≈õli u≈ºytkownicy zostali za≈Çadowani, usu≈Ñ placeholder "≈Åadowanie u≈ºytkownik√≥w..."
            if (data.data.length === 0) {
                userTableBody.innerHTML = '<tr><td colspan="6">Brak u≈ºytkownik√≥w do wy≈õwietlenia.</td></tr>';
            }
    
            // Ponownie dodaj event listenery po dynamicznej aktualizacji
            attachDeleteButtonEvents();
            attachPasswordButtonEvents();
        }).catch(error => {
            console.error('[admin_panel.js] B≈ÇƒÖd pobierania u≈ºytkownik√≥w:', error);
        });
    };
    
    
    

    // Wywo≈Çanie pobierania listy u≈ºytkownik√≥w na start
    fetchAndUpdateUserList();




// Obs≈Çuga formularza dodawania u≈ºytkownika

if (addUserForm) {
    addUserForm.addEventListener("submit", function (event) {
        event.preventDefault();

        const login = usernameInput.value.trim();
        const email = emailInput.value.trim();
        const password = passwordInput.value.trim();
        const role = roleSelect.value;
        const submitButton = addUserForm.querySelector("button[type='submit']");

        if (!login || !email || !password) {
            alert("Proszƒô wype≈Çniƒá wszystkie pola przed dodaniem u≈ºytkownika.");
            return;
        }

        logToConsole("Wys≈Çano dane do dodania u≈ºytkownika", { login, email, role });

        // Zablokowanie przycisku, aby u≈ºytkownik nie m√≥g≈Ç kliknƒÖƒá wielokrotnie
        submitButton.disabled = true;

        AdminAPI.addUser(login, email, password, role)
            .then(data => {
                if (data && data.status === "success") {
                    logToConsole("U≈ºytkownik zosta≈Ç dodany", data);
                    fetchAndUpdateUserList(); // Od≈õwie≈º listƒô u≈ºytkownik√≥w po dodaniu nowego u≈ºytkownika
                    usernameInput.value = "";
                    emailInput.value = "";
                    passwordInput.value = "";
                    roleSelect.value = "user";
                    //alert("U≈ºytkownik zosta≈Ç pomy≈õlnie dodany!");
                } else {
                    logToConsole("B≈ÇƒÖd podczas dodawania u≈ºytkownika", data ? data.message : "Nieznany b≈ÇƒÖd");
                    //alert("B≈ÇƒÖd podczas dodawania u≈ºytkownika: " + (data ? data.message : "Nieznany b≈ÇƒÖd"));
                }
            })
            .catch(error => {
                logToConsole("B≈ÇƒÖd podczas dodawania u≈ºytkownika", error);
                //alert("WystƒÖpi≈Ç b≈ÇƒÖd podczas dodawania u≈ºytkownika. Spr√≥buj ponownie.");
            })
            .finally(() => {
                // Odblokowanie przycisku po zako≈Ñczeniu operacji
                submitButton.disabled = false;
            });
    });
}



///////////////////////////////////////////////////////////////////

    // Logowanie wyszukiwania u≈ºytkownik√≥w
    searchInput.addEventListener('input', function() {
        const query = searchInput.value.toLowerCase();
        logToConsole('Wprowadzono wyszukiwanie', query);
        const rows = userTable.querySelectorAll('tr');
        rows.forEach(row => {
            const userId = row.querySelector('td:nth-child(1)').textContent.toLowerCase();
            const username = row.querySelector('td:nth-child(3)').textContent.toLowerCase();
            const email = row.querySelector('td:nth-child(4)').textContent.toLowerCase();
            if (userId.includes(query) || username.includes(query) || email.includes(query)) {
                row.style.display = '';
            } else {
                row.style.display = 'none';
            }
        });
    });



    

        //  Funkcja do usuwania u≈ºytkownika
        function deleteUser(userId) {
            AdminAPI.deleteUser(userId).then(() => {
                fetchAndUpdateUserList(); // üìå Od≈õwie≈º tabelƒô u≈ºytkownik√≥w po usuniƒôciu
            });
        }
    
        //  Funkcja do dynamicznego przypisywania zdarze≈Ñ dla przycisk√≥w usuwania
        function attachDeleteButtonEvents() {
            const deleteButtons = document.querySelectorAll('.delete-button');
    
            deleteButtons.forEach(button => {
                button.addEventListener('click', function(event) {
                    event.preventDefault();
                    const userId = this.dataset.userId; // Pobranie userId z `data-user-id`
    
                    if (!userId) {
                        console.error('[admin_panel.js] B≈ÇƒÖd: Nie znaleziono `data-user-id` w przycisku usuwania.');
                        return;
                    }
    
                    logToConsole('Usuwanie u≈ºytkownika o ID', userId);
    
                    AdminAPI.deleteUser(userId).then(data => {
                        if (data && data.status === 'success') {
                            const row = this.closest('tr');
                            if (row) row.remove();
                            logToConsole(`U≈ºytkownik o ID ${userId} zosta≈Ç usuniƒôty.`, data);
                        } else {
                            logToConsole(`B≈ÇƒÖd podczas usuwania u≈ºytkownika o ID ${userId}`, data ? data.message : "Nieznany b≈ÇƒÖd");
                        }
                    }).catch(error => {
                        logToConsole('B≈ÇƒÖd podczas usuwania u≈ºytkownika', error.message);
                        alert(`Nie uda≈Ço siƒô usunƒÖƒá u≈ºytkownika: ${error.message}`);
                    });
                });
            });
        }
    
        //  Funkcja do obs≈Çugi przycisk√≥w resetowania has≈Ça (otwieranie modala)
        function attachPasswordButtonEvents() {
            const passwordButtons = document.querySelectorAll('.reset-password-button');
            passwordButtons.forEach(button => {
                button.addEventListener('click', function() {
                    const userId = this.getAttribute('data-user-id');
                    const login = this.getAttribute('data-login');
                    modalUsername.textContent = login;
                    userIdInput.value = userId;
                    modal.style.display = 'flex';
                    logToConsole(`Klikniƒôto przycisk resetowania has≈Ça dla u≈ºytkownika o ID: ${userId}`, `Login: ${login}`);
                });
            });
        }
    
        //  Obs≈Çuga formularza resetowania has≈Ça
        if (resetPasswordForm) {
            resetPasswordForm.addEventListener("submit", function(event) {
                event.preventDefault(); //  Zapobiega od≈õwie≈ºeniu strony
        
                const userId = userIdInput.value.trim();
                const newPassword = newPasswordInput.value.trim();
        
                console.log("[admin_panel.js] Klikniƒôto 'Zresetuj has≈Ço' dla u≈ºytkownika:", userId);
                console.log("[admin_panel.js] Przekazywane nowe has≈Ço:", newPassword);
        
                if (!userId || !newPassword) {
                    alert("Proszƒô podaƒá nowe has≈Ço.");
                    return;
                }
        
                //  Wysy≈Çamy nowe has≈Ço do API
                AdminAPI.changeUserPassword(userId, newPassword)
                    .then(data => {
                        console.log("[admin_panel.js] Odpowied≈∫ API:", data);
                        if (data.status === "success") {
                            // üîπ ZAMIENIAMY ALERT NA AUTOMATYCZNE ZAMKNIƒòCIE MODALA
                            modal.style.display = "none"; //  Zamykamy modal po sukcesie
                            newPasswordInput.value = ""; // Czyszczenie pola has≈Ça
                        } else {
                            alert("B≈ÇƒÖd podczas resetowania has≈Ça: " + (data.message || "Nieznany b≈ÇƒÖd"));
                        }
                    })
                    .catch(error => {
                        console.error("[admin_panel.js] B≈ÇƒÖd resetowania has≈Ça:", error);
                        alert("WystƒÖpi≈Ç b≈ÇƒÖd podczas resetowania has≈Ça.");
                    });
            });
        }
        
        
    
        //  Wywo≈Çanie funkcji do dynamicznego przypisywania zdarze≈Ñ dla przycisk√≥w
        attachDeleteButtonEvents();
        attachPasswordButtonEvents();

    














 


/////////////////////////// TO ZOSTALO STOCKOWE ///////////////////



///////////////////////////////////////////////////////////////////

    // Logowanie zamykania modala
    closeModal.addEventListener('click', function() {
        modal.style.display = 'none';
        logToConsole('Zamkniƒôto modal resetowania has≈Ça', null);
    });

    // Logowanie klikniƒôcia w t≈Ço modala
    window.onclick = function(event) {
        if (event.target == modal) {
            modal.style.display = 'none';
            logToConsole('Klikniƒôto t≈Ço modala, modal zosta≈Ç zamkniƒôty', null);
        }
    };


/////////////////////////// TO ZOSTALO STOCKOWE ///////////////////











// Obs≈Çuga pobierania SQL Dump
const sqlDumpButton = document.getElementById("sql-dump-button");
if (sqlDumpButton) {
    sqlDumpButton.addEventListener("click", function () {
        fetch('/api/admin/sql-dump', {
            method: "GET",
            headers: Auth.attachAuthHeaders(),
        })
        .then(response => {
            const filename = response.headers.get('Content-Disposition')
                ?.split('filename=')[1]
                ?.replace(/["']/g, '') || "backup.sql"; // Pobiera nazwƒô pliku z API
        
            return response.blob().then(blob => ({ blob, filename }));
        })
        .then(({ blob, filename }) => {
            const url = window.URL.createObjectURL(blob);
            const a = document.createElement("a");
            a.href = url;
            a.download = filename; 
            document.body.appendChild(a);
            a.click();
            a.remove();
        })
        .catch(error => console.error("[admin_panel.js] B≈ÇƒÖd pobierania SQL Dump:", error));
        
    });
}



// Obs≈Çuga wyboru pliku SQL ‚Äì Wy≈õwietlanie nazwy wybranego pliku
if (sqlFileInput) {
    sqlFileInput.addEventListener("change", function () {
        const fileName = sqlFileInput.files.length > 0 ? sqlFileInput.files[0].name : "Nie wybrano pliku";
        document.querySelector(".file-name").textContent = fileName;
    });
}

// Obs≈Çuga importu SQL
if (sqlImportForm) {
    sqlImportForm.addEventListener("submit", function (event) {
        event.preventDefault();

        if (!sqlFileInput.files.length) {
            alert("Proszƒô wybraƒá plik przed importem.");
            return;
        }

        const file = sqlFileInput.files[0];

        // üìå Sprawdzamy poprawno≈õƒá formatu pliku przed wys≈Çaniem
        const allowedMimeTypes = ['application/sql', 'text/sql', 'application/octet-stream'];
        const allowedExtensions = ['sql'];
        const fileExtension = file.name.split('.').pop().toLowerCase();

        if (!allowedMimeTypes.includes(file.type) && !allowedExtensions.includes(fileExtension)) {
            alert("Nieprawid≈Çowy format pliku. Wybierz plik .sql.");
            return;
        }

        const formData = new FormData();
        formData.append("sql_file", file);

        const importButton = document.getElementById("sql-import-button");
        importButton.disabled = true;

        AdminAPI.importDatabase(formData)
            .then(data => {
                if (data && data.status === "success") {
                    showImportStatus("Baza danych zosta≈Ça pomy≈õlnie przywr√≥cona!", true);

                    // Po imporcie od≈õwie≈ºamy listƒô u≈ºytkownik√≥w
                    fetchAndUpdateUserList();
                } else {
                    showImportStatus("B≈ÇƒÖd podczas importu bazy danych.", false);
                }
            })
            .catch(error => {
                console.error("[admin_panel.js] B≈ÇƒÖd importu bazy danych:", error);
                showImportStatus("B≈ÇƒÖd podczas importu bazy danych.", false);
            })
            .finally(() => {
                importButton.disabled = false;
            });
    });
}








//////////////////////////////////// LEGACY

////////////////////////////////////// TEGO I TAK RACZEJ NIE BEDE IMPLEMENTOWAL ALE SIE FAJNIE KRECI PRZYNAJMNIEJ, WIEC MA ZOSTAC



    // Uruchomienie test√≥w jednostkowych
    if (runTestsButton) {
        runTestsButton.addEventListener('click', function () {
            logToConsole('Uruchamianie test√≥w jednostkowych', null);
    
            // Ukryj pole wynik√≥w i poka≈º loader
            testResults.style.display = 'none';
            loader.style.display = 'block';
    
            // Przewi≈Ñ do loadera
            scrollToElement(loader);
    
            AdminAPI.runTests().then(data => {
                if (!data) {
                    testResults.textContent = 'B≈ÇƒÖd: brak odpowiedzi z serwera.';
                    return;
                }
    
                logToConsole('Otrzymane dane JSON', data);
    
                // Tworzenie bardziej czytelnego podsumowania
                const totalTests = data.totalTests || 0;
                const totalAssertions = data.totalAssertions || 0;
                const totalFailures = data.totalFailures || 0;
                const passedTests = totalTests - totalFailures;
    
                let resultSummary = `
                    <h3>Podsumowanie test√≥w:</h3>
                    <p><strong>≈ÅƒÖczna liczba test√≥w:</strong> ${totalTests}</p>
                    <p><strong>≈ÅƒÖczna liczba asercji:</strong> ${totalAssertions}</p>
                    <p class="text-success"><strong>Testy zako≈Ñczone sukcesem:</strong> ${passedTests}</p>
                    <p class="text-failure"><strong>Testy zako≈Ñczone niepowodzeniem:</strong> ${totalFailures}</p>
                `;
    
                // Opcjonalnie, wy≈õwietlenie szczeg√≥≈Ç√≥w test√≥w
                if (data.results && data.results.length > 0) {
                    let details = '<h4>Szczeg√≥≈Çy test√≥w:</h4><ul>';
                    data.results.forEach(result => {
                        details += `<li>${result.repository}: ${result.tests} testy, ${result.assertions} asercje, ${result.failures} b≈Çƒôdy</li>`;
                    });
                    details += '</ul>';
                    resultSummary += details;
                }
    
                resultSummary += `<h3><a class="raw-link" href="http://localhost:8080/run_tests_raw" target="_blank">RAW</a></h3>`;
    
                // Wy≈õwietlenie wynik√≥w
                testResults.innerHTML = resultSummary;
                loader.style.display = 'none';
                testResults.style.display = 'block';
                scrollToElement(testResults); // Przewi≈Ñ do wynik√≥w
            }).catch(error => {
                logToConsole('B≈ÇƒÖd podczas uruchamiania test√≥w', error);
                testResults.textContent = 'WystƒÖpi≈Ç b≈ÇƒÖd podczas uruchamiania test√≥w.';
                loader.style.display = 'none';
                testResults.style.display = 'block';
                scrollToElement(testResults);
            });
        });
    }
    


// Obs≈Çuga uruchamiania test√≥w jednostkowych


if (runTestsButton) {
    runTestsButton.addEventListener("click", function () {
        logToConsole("Uruchamianie test√≥w jednostkowych", null);

        testResults.textContent = "Trwa uruchamianie test√≥w...";

        AdminAPI.runTests().then(data => {
            if (!data) {
                testResults.textContent = "B≈ÇƒÖd: brak odpowiedzi z serwera.";
                return;
            }

            logToConsole("Otrzymane dane test√≥w", data);

            // Tworzenie bardziej czytelnego podsumowania
            const totalTests = data.totalTests || 0;
            const totalAssertions = data.totalAssertions || 0;
            const totalFailures = data.totalFailures || 0;
            const passedTests = totalTests - totalFailures;

            let resultSummary = `
                ‚úÖ ≈ÅƒÖczna liczba test√≥w: ${totalTests}
                ‚úÖ ≈ÅƒÖczna liczba asercji: ${totalAssertions}
                ‚úÖ Testy zako≈Ñczone sukcesem: ${passedTests}
                ‚ùå Testy zako≈Ñczone niepowodzeniem: ${totalFailures}
            `;

            // Opcjonalnie, wy≈õwietlenie szczeg√≥≈Ç√≥w test√≥w
            if (data.results && data.results.length > 0) {
                resultSummary += `\nüîç Szczeg√≥≈Çy test√≥w:\n`;
                data.results.forEach(result => {
                    resultSummary += `üìå ${result.repository}: ${result.tests} testy, ${result.assertions} asercje, ${result.failures} b≈Çƒôdy\n`;
                });
            }

            testResults.textContent = resultSummary;
        }).catch(error => {
            logToConsole("B≈ÇƒÖd podczas uruchamiania test√≥w", error);
            testResults.textContent = "WystƒÖpi≈Ç b≈ÇƒÖd podczas uruchamiania test√≥w.";
        });
    });
}







});